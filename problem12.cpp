// Project Euler (http://projecteuler.net/)
// Problem 12
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
// ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred
// divisors?
//
// Answer: 76576500
// Execution time: 0m0.103s

// This solution calculates the number of divisors for each triangle number
// using the prime factorization. The number of divisors is the product of the
// exponents of the prime factorization incremented by one. For example,
// the prime factorization of 5664 = 2^5 x 3 x 59 and the product of those
// incremented exponents = (5+1) x (1+1) x (1+1) = 24.
// Therefore, 5664 has 24 divisors.

#include <iostream>

#include "prime.h"

using namespace std;

int main()
{

  // Only working with 100 prime numbers isn't going to give us an accurate
  // number of divisors for triangle numbers with prime factors > 100, but it
  // gives us enough primes to find the answer.
  vector<bool> prime_sieve = Prime::getPrimeSieve(100);
  
  for (int i = 1; ; ++i)
  {
    int tri_num = (i * (i + 1)) / 2;

    int num_divisors = 1;

    for (unsigned int prime = 0; prime < prime_sieve.size(); ++prime)
    {
      if (prime_sieve[prime])
      {
        for (int prime_power = 1; ; ++prime_power)
        {
          if (!(tri_num % prime == 0))
          {
            num_divisors *= prime_power;
            break;
          }

          tri_num /= prime;
        }
      }

      if (tri_num == 1)
        break;
    }

    if (num_divisors > 500)
    {
      cout << (i * (i + 1)) / 2 << endl;
      break;
    }
  }
}
